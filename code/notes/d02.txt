
Fn f1 cert

Return(0) - everything went well

compile - gcc -o outputfile inputfile.c

write(1, "@", 1) - write to stdoutput

Read synopses for compiler declaration - #include

\n - to get rid of % in stdout

&c - character address

Int - declare function - what function returns

Void - don't need return type (START FUNCTION WITH RETURN TYPE)

'' - simple quote for char not string

Arrays - 
	int name[42] -  array containing 42 int

Struct name
{
	int a;
	char b[21];
}

name.a

Declare

Main triggers function execution

== != || && !

A += 10 -> a = a + 10
a++

sizeof(var)

&a - address of var a in ram

A ? B : c


pointers - var that stores memory address of a variable

Declare - int *p


Control structures
if (exp)
{ 
 	fast
}
else
{

}

while (exp)
{ 
 	fast
}

Return ();



????

Int tab [42]; and p = &(tab[0]);
tab[x] -> *(p+x)




Only use main if function is asked

ft_putchar - is an authorized function


Compilation on moulin done with -Wall -Wextra -Werror, and uses gcc

Moulinette uses norm - -R CheckForbiddenSourceHeader


Gcc -o test2 -Wall -Wextra -Werror 


-R CheckForbiddenSourceHeader ?????



#1

'A' -> computer knows ascii
Writing doesn't make new line



#2
'5' - quotes makes you able to see ascii and print even for mums

#include <stdio.h> - printf("var %d", x)

If doesn't need curly braces if tabulation is right






















